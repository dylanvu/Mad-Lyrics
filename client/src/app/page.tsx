"use client";

import {
    useState,
    useRef,
    MutableRefObject,
    useEffect,
    createRef,
} from "react";
import { Input } from "@/components/ui/input";

interface LyricPart {
    part: string;
    lyrics: string[];
}

const example = `
[
  {
    "part": "Verse",
    "lyrics": [
      "The stars at night, they shine so {adjective},",
      "Guiding me through the {noun} so {adjective}.",
      "My {noun} by my side, steady and {adjective},",
      "Through the silent streets, our spirits {verb}."
    ]
  },
  {
    "part": "Chorus",
    "lyrics": [
      "With every heartbeat, I feel {adjective},",
      "In a world where {noun} often {verb}.",
      "But in your {noun}, I find my {noun},",
      "And in your eyes, the {noun} I've always {verb}."
    ]
  },
  {
    "part": "Bridge",
    "lyrics": [
      "In the quiet of the {noun}, we {verb},",
      "To the music that makes our souls {verb},",
      "Hand in hand, we {verb} and {verb},",
      "In our {noun} world, where love never {verb}."
    ]
  },
  {
    "part": "Outro",
    "lyrics": [
      "So here's to our {noun}, our bond, and our {noun},",
      "In this journey, we're never {adjective}.",
      "From {noun} to {noun}, under the {noun}'s glow,",
      "Together, into the future we {verb}."
    ]
  }
]
`;

export default function Home() {
    const [inputs, setInputs] = useState<string[]>([]);

    // convert from string to json
    const json = JSON.parse(example) as LyricPart[];

    // count the number of {} (inputs)
    // regex generated by chatgpt lol
    const inputRegex = /\{.*?\}/g;

    // find out how many inputs there are
    // let numInputs = 0;
    // for (const part of json) {
    //     for (const lyric of part.lyrics) {
    //         const matches = lyric.match(inputRegex);
    //         numInputs += matches ? matches.length : 0;
    //     }
    // }

    // const [inputRefs, setInputRefs] = useState<MutableRefObject<null>[]>([]);

    // useEffect(() => {
    //     // add or remove refs
    //     setInputRefs((inputRefs) =>
    //         Array(numInputs)
    //             .fill(null)
    //             .map((_, i) => inputRefs[i] || createRef())
    //     );
    // }, [numInputs]);

    return (
        <main className="flex min-h-screen flex-col items-center justify-between p-24">
            <div className="main-div">
                {json.map((part, index) => {
                    let lyricsComponents: JSX.Element[] = [];
                    // plan: split each string up by the inputRegex, and then insert a component between each
                    part.lyrics.forEach((lyric, lyricIndex) => {
                        if (lyric.match(inputRegex)) {
                            // split and generate static components
                            const staticLyrics = lyric
                                .split(inputRegex)
                                .map((staticLyric) => {
                                    // TODO: replace with static lyric
                                    return <span>{staticLyric}</span>;
                                });
                            // second pass: add in inputs
                            // TODO: replace with input component
                            const separatorComponent = (
                                <Input
                                    className="inline w-30 my-4"
                                    onChange={(e) => {
                                        console.log(
                                            index * json.length + lyricIndex
                                        );
                                    }}
                                />
                            );
                            // Use flatMap to insert the separator component between each element
                            const inputAndStaticArray = staticLyrics.flatMap(
                                (component, index) =>
                                    index < staticLyrics.length - 1
                                        ? [component, separatorComponent]
                                        : [component]
                            );
                            // join the array
                            lyricsComponents =
                                lyricsComponents.concat(inputAndStaticArray);
                        } else {
                            // return just the text
                            // TODO: replace with static lyric
                            lyricsComponents.push(<span>{lyric}</span>);
                        }
                        // now push a break for fomatting
                        lyricsComponents.push(<br />);
                    });
                    // now, render the whole lyric part
                    return (
                        <div key={`lyric-part-${index}`}>
                            <div>{part.part}</div>
                            {lyricsComponents.map((component) => component)}
                        </div>
                    );
                })}
            </div>
        </main>
    );
}
